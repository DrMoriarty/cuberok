/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -a dbusinterface org.qtdesktop.cuberok.xml
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "dbusinterface.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include "main.h"
/*
 * Implementation of adaptor class CuberokAdaptor
 */

CuberokAdaptor::CuberokAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

CuberokAdaptor::~CuberokAdaptor()
{
    // destructor
}

void CuberokAdaptor::newPlaylist()
{
    // handle method call org.qtdesktop.cuberok.newPlaylist
	QStringList list;
	list << QString("");
	sendCommand(list);
}

void CuberokAdaptor::next()
{
    // handle method call org.qtdesktop.cuberok.next
	QStringList list;
	list << "#next";
	sendCommand(list);
}

void CuberokAdaptor::open(const QString &url)
{
    // handle method call org.qtdesktop.cuberok.open
	QStringList list;
	list << url;
	sendCommand(list);
}

void CuberokAdaptor::play()
{
    // handle method call org.qtdesktop.cuberok.play
	QStringList list;
	list << "#play";
	sendCommand(list);
}

void CuberokAdaptor::prev()
{
    // handle method call org.qtdesktop.cuberok.prev
	QStringList list;
	list << "#prev";
	sendCommand(list);
}

QString CuberokAdaptor::status()
{
    // handle method call org.qtdesktop.cuberok.status
    QString out0;
	out0 = "TODO: Cuberok status";
    return out0;
}

void CuberokAdaptor::stop()
{
    // handle method call org.qtdesktop.cuberok.stop
	QStringList list;
	list << "#stop";
	sendCommand(list);
}

void CuberokAdaptor::volume(int vol)
{
    // handle method call org.qtdesktop.cuberok.volume
	QStringList list;
	list << QString("#volume %1").arg(vol);
	sendCommand(list);
}

void CuberokAdaptor::sendCommand(const QStringList& list)
{
	QByteArray bytes;
	QDataStream stream(&bytes, QIODevice::WriteOnly);
	stream << list;
	if(bytes.size() >= SHMEM_SIZE) {
		qDebug("Arguments too long! These size is greater than %d bytes\n", SHMEM_SIZE);
	}
	bool success = false;
	long long time = 0;
	while(!success) {
		shm.lock();
		char *data = (char*)shm.data();
		if(!data[0]) {
			memcpy(data+1, bytes.data(), bytes.size());
			data[0] = list.size() > 255 ? 255 : list.size();
			shm.unlock();
			success = true;
		} else {
			shm.unlock();
			//msleep(100);
			time += 1;
		}
		if(!success && time > 10000) {
			fprintf(stderr, "Timeout!");
			return;
		}
	}
}
